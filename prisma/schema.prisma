generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  Int    @id @default(autoincrement())
  name                String?
  email               String?   @unique
  emailVerified       DateTime?
  image               String?
  hashedPassword      String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  role                String?
  accounts            Account[]
  Trips               Trip[]
  memos               Memo[]
  itineraries         Itinerary[] 
}

model Account {
  id                  Int    @id @default(autoincrement())
  userId              Int
  type                String
  provider            String
  providerAccountId   String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  user                User @relation(fields: [userId], references: [id], onDelete:Cascade)
  role                String?

  @@unique([provider, providerAccountId])
}

model Trip  {
  id                  Int      @id @default(autoincrement())
  startDate           String?
  endDate             String?
  name                String
  destination         String?
  user                User @relation(fields: [userId], references: [id], onDelete:Cascade)
  userId              Int
  memos               Memo[]
  itineraries         Itinerary[]
  blog                Boolean @default(false)
  share               Boolean @default(false)
}

model Memo {
  id                  Int     @id @default(autoincrement())
  name                String
  content             String
  isCompleted         Boolean @default(false)
  trip                Trip @relation(fields: [tripId], references: [id], onDelete:Cascade)
  tripId              Int
  user                User @relation(fields: [userId], references: [id], onDelete:Cascade)
  userId              Int
}

model Itinerary {
  id                  Int     @id @default(autoincrement())
  date                String
  time                String
  name                String
  content             String?
  hideContent         String?
  blogContent         String?
  isShowContent       Boolean @default(false)
  imageName           String?
  url                 String?
  altText             String?
  trip                Trip @relation(fields: [tripId], references: [id], onDelete:Cascade)
  tripId              Int
  user                User @relation(fields: [userId], references: [id], onDelete:Cascade)
  userId              Int
}

model Post {
  id                  Int     @id @default(autoincrement())
  createdDate         DateTime  @default(now())  
  updatedDate         DateTime  @updatedAt  
  title               String
  content             String
  category            Category @relation(fields: [categoryId], references: [id])
  categoryId          Int
  description         String
  slug                String  @unique
  postImage           PostImage? @relation(fields: [postImageId], references: [id])
  postImageId         Int?
  draft               Boolean @default(false)
}

model Category {
  id                  Int     @id @default(autoincrement())
  name                String
  slug                String  @unique
  title               String?
  content             String?
  description         String?
  posts               Post[]
  postImage           PostImage? @relation(fields: [postImageId], references: [id])
  postImageId         Int?
  createdDate         DateTime  @default(now())  
  updatedDate         DateTime  @updatedAt  
}

model DashboardMemo {
  id                  Int     @id @default(autoincrement())
  name                String
  content             String
  isCompleted         Boolean @default(false)
}

model PostImage {
  id                  Int      @id @default(autoincrement())
  name                String
  url                 String
  altText             String
  posts               Post[] 
  categories          Category[] 
}
