// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int    @id @default(autoincrement())
  name                String?
  email               String?   @unique
  emailVerified       DateTime?
  image               String?
  hashedPassword      String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  accounts            Account[]
  memos               Memo[]
  itineraries         Itinerary[]
  userImages          UserImage[]
}

model Account {
  id                  Int    @id @default(autoincrement())
  userId              Int
  type                String
  provider            String
  providerAccountId   String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  user                User @relation(fields: [userId], references: [id], onDelete:Cascade)
  
  @@unique([provider, providerAccountId])
}

model Memo {
  id                 Int     @id @default(autoincrement())
  name               String
  content            String
  isCompleted        Boolean @default(false)
  user               User @relation(fields: [userId], references: [id], onDelete:Cascade)
  userId             Int
  userImage          UserImage[] @relation("UserImageToMemo")
}

model Itinerary {
  id                 Int     @id @default(autoincrement())
  date               String
  time               String
  name               String
  content            String
  hideContent        String
  isShowContent      Boolean @default(false)
  imageUrl           String?
  user               User @relation(fields: [userId], references: [id], onDelete:Cascade)
  userId             Int
  userImage        UserImage[] @relation("UserImageToItinerary")

}

model Post {
  id                Int     @id @default(autoincrement())
  createdDate       DateTime  @default(now())  
  updatedDate       DateTime  @updatedAt  
  title             String
  content           String
  category          Category @relation(fields: [categoryId], references: [id])
  categoryId        Int
  description       String
  slug              String
  postImage         PostImage? @relation(fields: [postImageId], references: [id])
  postImageId       Int?
}

model Category {
  id               Int     @id @default(autoincrement())
  name             String
  slug             String
  content          String?
  description      String
  posts            Post[]
  postImage        PostImage? @relation(fields: [postImageId], references: [id])
  postImageId      Int?
}

model PostImage {
  id            Int      @id @default(autoincrement())
  url           String
  altText       String
  posts         Post[] 
  categories    Category[] 
}

model UserImage {
  id            Int      @id @default(autoincrement())
  url           String
  altText       String
  user          User     @relation(fields: [userId], references: [id])
  userId        Int
  memoImages         Memo[]      @relation("UserImageToMemo")
  itineraryImages    Itinerary[] @relation("UserImageToItinerary")
}


